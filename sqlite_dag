(Read input
 from input buffer)
 
(Execute meta command
 if preceded by .)

(Prepare statement)

(Split into select or insert statement

 ((Execute select statement)
  (Get location of row in pager (in memory))
  (Deserialize every row)
  (Print every row))

 ((Execute insert statement)
  (Get location of row in pager (in memory))
  (Serialize row)
  (Increment number of rows in table))
  
  )
   




((Why B-trees?)
 (Searching is fast (O (log N)))
 (Inserting is fast (O (log N)))
 (Unlike a hash table,
  traversing a range of values is fast))



(How do you ensure B-trees stay balanced?
 (Nodes have to have number of children \in [m/2, m]))




(Why do B-trees have more than 2 children?
 Why do 'regular' trees have only 2 children?)

(Moving through a regular tree involves
 going from node to node
 each of which is a jump in memory)
 
(Moving through a btree of a db involves
 doing binary search on internal nodes
 each of which is a jump in memory
 and going from node to node
 each of which is a /disk seek/)
 
(Disk seeks are /extremely/ expensive
 (How expensive?)
 (Factor of ___ compared to RAM access))
 
(Minimize the number of disk seeks
 by minimizing the height of the tree)
 
(Minimize the height of the tree
 by increasing the number of children)
 
(Of course, if you take this to the extreme,
 you are doing binary search through one array again.)
 
(A balance is achieved by keeping the pieces you scan
 (<-->
  (the /pages/)
  (or, the number of split points))
 small,
 but not so small that
 you have to descend many levels of the tree)
 
(Think of the B-tree like
 a slight nudge in the direction of a tree
 from a /sorted/ array)
 
(Still a sorted array,
 but now the chunks of the array are
 separated in memory,
 allowing it to be /dynamic/
 
 (in other words, to alter it,
  you don't have to re-copy the whole thing))









(SQLite uses both B-trees and B+ trees.
 What's the difference?)

(Internal nodes are different)

(Difference:
 (B-trees:
  internal nodes store keys and values)
 (B+ trees:
  internal nodes only store keys))
  
(Translates to:
 (B-trees:
  used for /indexes/)
 (B+ trees:
  used for /tables/))



(How to remember?
 (B-trees:
  the 'natural' definition, of internal and leaf nodes
  being symmetric)
 (B+ trees:
  the 'augmented' version for faster speed,
  where a modification, viz. removal of values from internal nodes, is made))





(How are B-trees balanced?)

(After a deletion, balancing involves
 (either
  getting donated elements from siblings
  or
  merging the node with a sibling))
  
(What about balancing after an insertion?)







(What is a page?)

(A page is the atom of 'disk'
 that the computer reads)

(Each node corresponds to one page
 Or, each node /is stored by/ one page)

(Internal nodes point to their children
 by storing the page number that stores the child)

(Pages themselves are stored in the database file
 in order of page number)
 
(A B-tree is identified by the page number
 of its root node)




(Pages are associated with a database (file),
 and not individual tables)






(If db is a simple list or array or rows
 We identify a position/row with just the row number)
 
(If db has tables stored as trees,
 We identify a position/row by the page number of the node,
 and the cell number within the node)
























(How many bits in a byte?)

;; relate to hexadecimal <-> 16

(2 hexadecimal numbers correspond to one byte)

(2 hexadecimal numbers is 16 * 16 values)
(or 2^4 * 2^4 -> 2^8, which is number of spaces in a byte)

(8)
